{"ast":null,"code":"var _jsxFileName = \"/home/yesiaw/GitLabProgect/src/pages/dishes/horizontalScroll/scroll.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { NavLink, useHistory, useParams } from 'react-router-dom';\nimport cx from './scroll.module.css';\nimport * as queryString from 'querystring';\nimport { Link } from 'react-scroll';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HorizontalScroll = props => {\n  _s();\n\n  const history = useHistory(); // debugger\n\n  const activatedItem = id => {\n    let newId;\n\n    if (id != newId) {\n      debugger;\n      document.getElementById(`scrollCont${newId}`).classList.remove(cx.ScrollItemActive);\n    }\n\n    document.getElementById(`scrollCont${id}`).classList.add(cx.ScrollItemActive);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cx.ScrollContainer,\n    children: props.categories.map(el => {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: el.id,\n        smooth: false,\n        duration: 500,\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          id: `scrollCont${el.id}`,\n          onClick: () => {\n            activatedItem(el.id);\n          },\n          className: cx.ScrollItem,\n          children: el.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 79\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HorizontalScroll, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = HorizontalScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"HorizontalScroll\");","map":{"version":3,"sources":["/home/yesiaw/GitLabProgect/src/pages/dishes/horizontalScroll/scroll.js"],"names":["React","NavLink","useHistory","useParams","cx","queryString","Link","HorizontalScroll","props","history","activatedItem","id","newId","document","getElementById","classList","remove","ScrollItemActive","add","ScrollContainer","categories","map","el","ScrollItem","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,SAA9B,QAA+C,kBAA/C;AACA,OAAOC,EAAP,MAAe,qBAAf;AACA,OAAO,KAAKC,WAAZ,MAA6B,aAA7B;AACA,SAASC,IAAT,QAAqB,cAArB;;AAGA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAEvC,QAAMC,OAAO,GAAGP,UAAU,EAA1B,CAFuC,CAGvC;;AAEI,QAAMQ,aAAa,GAAIC,EAAD,IAAQ;AAC1B,QAAIC,KAAJ;;AACA,QAAGD,EAAE,IAAIC,KAAT,EAAe;AACX;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAyB,aAAYF,KAAM,EAA3C,EAA8CG,SAA9C,CAAwDC,MAAxD,CAA+DZ,EAAE,CAACa,gBAAlE;AACH;;AACDJ,IAAAA,QAAQ,CAACC,cAAT,CAAyB,aAAYH,EAAG,EAAxC,EAA2CI,SAA3C,CAAqDG,GAArD,CAAyDd,EAAE,CAACa,gBAA5D;AAEH,GARD;;AASJ,sBAEI;AAAM,IAAA,SAAS,EAAEb,EAAE,CAACe,eAApB;AAAA,cACKX,KAAK,CAACY,UAAN,CAAiBC,GAAjB,CAAsBC,EAAD,IAAQ;AAC1B,0BAAO,QAAC,IAAD;AAAM,QAAA,EAAE,EAAIA,EAAE,CAACX,EAAf;AAAmB,QAAA,MAAM,EAAI,KAA7B;AAAqC,QAAA,QAAQ,EAAI,GAAjD;AAAA,qCAAuD;AAAQ,UAAA,EAAE,EAAK,aAAYW,EAAE,CAACX,EAAG,EAAjC;AAAoC,UAAA,OAAO,EAAI,MAAM;AAACD,YAAAA,aAAa,CAACY,EAAE,CAACX,EAAJ,CAAb;AAAqB,WAA3E;AAA6E,UAAA,SAAS,EAAEP,EAAE,CAACmB,UAA3F;AAAA,oBACzDD,EAAE,CAACE;AADsD;AAAA;AAAA;AAAA;AAAA,gBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAKH,KANA;AADL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAiBH,CA/BM;;GAAMjB,gB;UAEOL,U;;;KAFPK,gB","sourcesContent":["import React from 'react'\nimport { NavLink, useHistory, useParams } from 'react-router-dom'\nimport cx from './scroll.module.css'\nimport * as queryString from 'querystring'\nimport { Link } from 'react-scroll'\n\n\nexport const HorizontalScroll = (props) => {\n    \n    const history = useHistory();\n    // debugger\n\n        const activatedItem = (id) => {\n            let newId;\n            if(id != newId){\n                debugger\n                document.getElementById(`scrollCont${newId}`).classList.remove(cx.ScrollItemActive)\n            }\n            document.getElementById(`scrollCont${id}`).classList.add(cx.ScrollItemActive)\n            \n        }\n    return (\n\n        <div  className={cx.ScrollContainer}>\n            {props.categories.map((el) => {\n                return <Link to = {el.id} smooth = {false}  duration = {500}> <button id = {`scrollCont${el.id}`} onClick = {() => {activatedItem(el.id)}} className={cx.ScrollItem}>\n                    {el.name}\n                </button></Link>\n\n\n            })}\n\n\n        </div>\n\n\n\n    )\n}"]},"metadata":{},"sourceType":"module"}