{"ast":null,"code":"import { getCategory, getDishes } from \"../../../api\";\nconst SET_DISH = \"SET_DISH\";\nconst SET_IS_FETCHING = \"SET_IS_FETCHING\";\nconst SET_CATEGORY = \"SET_CATEGORY\";\nconst initialState = {\n  isFetching: true,\n  dishes: [],\n  categories: []\n};\nexport default function dishReducer(state = initialState, action) {\n  // debugger\n  switch (action.type) {\n    case SET_DISH:\n      const dishIndex = state.dishes.findIndex(dish => dish.id === action.payload.id); // debugger\n\n      if (dishIndex == -1) {\n        // debugger\n        return { ...state,\n          dishes: [...state.dishes, action.payload],\n          isFetching: false\n        };\n      }\n\n    case SET_IS_FETCHING:\n      return { ...state,\n        isFetching: action.data\n      };\n\n    case SET_CATEGORY:\n      return { ...state,\n        categories: action.data\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst setDish = dish => ({\n  type: SET_DISH,\n  payload: dish\n});\n\nconst setIsFetching = data => ({\n  type: SET_IS_FETCHING,\n  data\n});\n\nconst setCategory = data => {\n  return {\n    type: SET_CATEGORY,\n    data\n  };\n};\n\nexport const getDish = id => {\n  return async dispatch => {\n    dispatch(setIsFetching(true));\n    const response = await getDishes(id);\n    dispatch(setDish(response));\n    dispatch(setIsFetching(false)); // debugger\n  };\n};\nexport const getCategories = () => {\n  return async dispatch => {\n    const response = await getCategory();\n    dispatch(setCategory(response.data));\n  };\n};","map":{"version":3,"sources":["/home/yesiaw/GitLabProgect/src/pages/dishes/ducks/reducer.js"],"names":["getCategory","getDishes","SET_DISH","SET_IS_FETCHING","SET_CATEGORY","initialState","isFetching","dishes","categories","dishReducer","state","action","type","dishIndex","findIndex","dish","id","payload","data","setDish","setIsFetching","setCategory","getDish","dispatch","response","getCategories"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,cAAvC;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,UAAU,EAAE,IADQ;AAEpBC,EAAAA,MAAM,EAAE,EAFY;AAGpBC,EAAAA,UAAU,EAAE;AAHQ,CAArB;AAMA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGL,YAA7B,EAA2CM,MAA3C,EAAmD;AACjE;AACA,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKV,QAAL;AACC,YAAMW,SAAS,GAAGH,KAAK,CAACH,MAAN,CAAaO,SAAb,CAAwBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAP,CAAeD,EAA5D,CAAlB,CADD,CAEC;;AACA,UAAIH,SAAS,IAAI,CAAC,CAAlB,EAAqB;AACpB;AACA,eAAO,EACN,GAAGH,KADG;AAENH,UAAAA,MAAM,EAAE,CAAC,GAAGG,KAAK,CAACH,MAAV,EAAkBI,MAAM,CAACM,OAAzB,CAFF;AAGNX,UAAAA,UAAU,EAAE;AAHN,SAAP;AAKA;;AACF,SAAKH,eAAL;AACC,aAAO,EAAE,GAAGO,KAAL;AAAYJ,QAAAA,UAAU,EAAEK,MAAM,CAACO;AAA/B,OAAP;;AAED,SAAKd,YAAL;AACC,aAAO,EACN,GAAGM,KADG;AAENF,QAAAA,UAAU,EAAEG,MAAM,CAACO;AAFb,OAAP;;AAKD;AACC,aAAOR,KAAP;AAtBF;AAwBA;;AAED,MAAMS,OAAO,GAAIJ,IAAD,KAAW;AAAEH,EAAAA,IAAI,EAAEV,QAAR;AAAkBe,EAAAA,OAAO,EAAEF;AAA3B,CAAX,CAAhB;;AACA,MAAMK,aAAa,GAAIF,IAAD,KAAW;AAAEN,EAAAA,IAAI,EAAET,eAAR;AAAyBe,EAAAA;AAAzB,CAAX,CAAtB;;AACA,MAAMG,WAAW,GAAIH,IAAD,IAAU;AAC7B,SAAO;AAACN,IAAAA,IAAI,EAAER,YAAP;AAAqBc,IAAAA;AAArB,GAAP;AACA,CAFD;;AAKA,OAAO,MAAMI,OAAO,GAAIN,EAAD,IAAQ;AAC9B,SAAO,MAAOO,QAAP,IAAoB;AAC1BA,IAAAA,QAAQ,CAACH,aAAa,CAAC,IAAD,CAAd,CAAR;AACA,UAAMI,QAAQ,GAAG,MAAMvB,SAAS,CAACe,EAAD,CAAhC;AACAO,IAAAA,QAAQ,CAACJ,OAAO,CAACK,QAAD,CAAR,CAAR;AACAD,IAAAA,QAAQ,CAACH,aAAa,CAAC,KAAD,CAAd,CAAR,CAJ0B,CAK1B;AACA,GAND;AAOA,CARM;AAUP,OAAO,MAAMK,aAAa,GAAG,MAAM;AAClC,SAAO,MAAOF,QAAP,IAAoB;AAC1B,UAAMC,QAAQ,GAAG,MAAMxB,WAAW,EAAlC;AACAuB,IAAAA,QAAQ,CAACF,WAAW,CAACG,QAAQ,CAACN,IAAV,CAAZ,CAAR;AAEA,GAJD;AAKA,CANM","sourcesContent":["import { getCategory, getDishes } from \"../../../api\";\n\nconst SET_DISH = \"SET_DISH\";\nconst SET_IS_FETCHING = \"SET_IS_FETCHING\";\nconst SET_CATEGORY = \"SET_CATEGORY\"\n\nconst initialState = {\n\tisFetching: true,\n\tdishes: [],\n\tcategories: []\n};\n\nexport default function dishReducer(state = initialState, action) {\n\t// debugger\n\tswitch (action.type) {\n\t\tcase SET_DISH:\n\t\t\tconst dishIndex = state.dishes.findIndex((dish) => dish.id === action.payload.id)\n\t\t\t// debugger\n\t\t\tif (dishIndex == -1) {\n\t\t\t\t// debugger\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tdishes: [...state.dishes, action.payload],\n\t\t\t\t\tisFetching: false\n\t\t\t\t}\n\t\t\t}\n\t\tcase SET_IS_FETCHING:\n\t\t\treturn { ...state, isFetching: action.data };\n\t\t\t\n\t\tcase SET_CATEGORY:\n\t\t\treturn { \n\t\t\t\t...state,\n\t\t\t\tcategories: action.data\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst setDish = (dish) => ({ type: SET_DISH, payload: dish });\nconst setIsFetching = (data) => ({ type: SET_IS_FETCHING, data });\nconst setCategory = (data) => {\n\treturn {type: SET_CATEGORY, data }\n}\n\n\nexport const getDish = (id) => {\n\treturn async (dispatch) => {\n\t\tdispatch(setIsFetching(true));\n\t\tconst response = await getDishes(id);\n\t\tdispatch(setDish(response));\n\t\tdispatch(setIsFetching(false));\n\t\t// debugger\n\t};\n};\n\nexport const getCategories = () => {\n\treturn async (dispatch) => {\n\t\tconst response = await getCategory();\n\t\tdispatch(setCategory(response.data))\n\t\t\n\t}\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}