{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _isValidIdentifier = _interopRequireDefault(require(\"../validators/isValidIdentifier\"));\n\nvar _generated = require(\"../builders/generated\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = valueToNode;\nexports.default = _default;\nconst objectToString = Function.call.bind(Object.prototype.toString);\n\nfunction isRegExp(value) {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n  return proto === null || proto === Object.prototype;\n}\n\nfunction valueToNode(value) {\n  if (value === undefined) {\n    return (0, _generated.identifier)(\"undefined\");\n  }\n\n  if (value === true || value === false) {\n    return (0, _generated.booleanLiteral)(value);\n  }\n\n  if (value === null) {\n    return (0, _generated.nullLiteral)();\n  }\n\n  if (typeof value === \"string\") {\n    return (0, _generated.stringLiteral)(value);\n  }\n\n  if (typeof value === \"number\") {\n    let result;\n\n    if (Number.isFinite(value)) {\n      result = (0, _generated.numericLiteral)(Math.abs(value));\n    } else {\n      let numerator;\n\n      if (Number.isNaN(value)) {\n        numerator = (0, _generated.numericLiteral)(0);\n      } else {\n        numerator = (0, _generated.numericLiteral)(1);\n      }\n\n      result = (0, _generated.binaryExpression)(\"/\", numerator, (0, _generated.numericLiteral)(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = (0, _generated.unaryExpression)(\"-\", result);\n    }\n\n    return result;\n  }\n\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return (0, _generated.regExpLiteral)(pattern, flags);\n  }\n\n  if (Array.isArray(value)) {\n    return (0, _generated.arrayExpression)(value.map(valueToNode));\n  }\n\n  if (isPlainObject(value)) {\n    const props = [];\n\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n\n      if ((0, _isValidIdentifier.default)(key)) {\n        nodeKey = (0, _generated.identifier)(key);\n      } else {\n        nodeKey = (0, _generated.stringLiteral)(key);\n      }\n\n      props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value[key])));\n    }\n\n    return (0, _generated.objectExpression)(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}","map":{"version":3,"sources":["/home/yesiaw/GitLabProgect/node_modules/@babel/types/lib/converters/valueToNode.js"],"names":["Object","defineProperty","exports","value","default","_isValidIdentifier","_interopRequireDefault","require","_generated","obj","__esModule","_default","valueToNode","objectToString","Function","call","bind","prototype","toString","isRegExp","isPlainObject","proto","getPrototypeOf","undefined","identifier","booleanLiteral","nullLiteral","stringLiteral","result","Number","isFinite","numericLiteral","Math","abs","numerator","isNaN","binaryExpression","is","unaryExpression","pattern","source","flags","match","regExpLiteral","Array","isArray","arrayExpression","map","props","key","keys","nodeKey","push","objectProperty","objectExpression","Error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _isValidIdentifier = _interopRequireDefault(require(\"../validators/isValidIdentifier\"));\n\nvar _generated = require(\"../builders/generated\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = valueToNode;\nexports.default = _default;\nconst objectToString = Function.call.bind(Object.prototype.toString);\n\nfunction isRegExp(value) {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const proto = Object.getPrototypeOf(value);\n  return proto === null || proto === Object.prototype;\n}\n\nfunction valueToNode(value) {\n  if (value === undefined) {\n    return (0, _generated.identifier)(\"undefined\");\n  }\n\n  if (value === true || value === false) {\n    return (0, _generated.booleanLiteral)(value);\n  }\n\n  if (value === null) {\n    return (0, _generated.nullLiteral)();\n  }\n\n  if (typeof value === \"string\") {\n    return (0, _generated.stringLiteral)(value);\n  }\n\n  if (typeof value === \"number\") {\n    let result;\n\n    if (Number.isFinite(value)) {\n      result = (0, _generated.numericLiteral)(Math.abs(value));\n    } else {\n      let numerator;\n\n      if (Number.isNaN(value)) {\n        numerator = (0, _generated.numericLiteral)(0);\n      } else {\n        numerator = (0, _generated.numericLiteral)(1);\n      }\n\n      result = (0, _generated.binaryExpression)(\"/\", numerator, (0, _generated.numericLiteral)(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = (0, _generated.unaryExpression)(\"-\", result);\n    }\n\n    return result;\n  }\n\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return (0, _generated.regExpLiteral)(pattern, flags);\n  }\n\n  if (Array.isArray(value)) {\n    return (0, _generated.arrayExpression)(value.map(valueToNode));\n  }\n\n  if (isPlainObject(value)) {\n    const props = [];\n\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n\n      if ((0, _isValidIdentifier.default)(key)) {\n        nodeKey = (0, _generated.identifier)(key);\n      } else {\n        nodeKey = (0, _generated.stringLiteral)(key);\n      }\n\n      props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value[key])));\n    }\n\n    return (0, _generated.objectExpression)(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}"]},"metadata":{},"sourceType":"script"}